!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=3)}([function(t,e,n){"use strict";var o;n.d(e,"a",(function(){return o})),function(t){t[t.Trace=0]="Trace",t[t.Debug=1]="Debug",t[t.Information=2]="Information",t[t.Warning=3]="Warning",t[t.Error=4]="Error",t[t.Critical=5]="Critical",t[t.None=6]="None"}(o||(o={}))},function(t,e,n){"use strict";(function(t,o){n.d(e,"e",(function(){return i})),n.d(e,"a",(function(){return a})),n.d(e,"c",(function(){return c})),n.d(e,"g",(function(){return l})),n.d(e,"k",(function(){return h})),n.d(e,"l",(function(){return u})),n.d(e,"f",(function(){return g})),n.d(e,"d",(function(){return d})),n.d(e,"b",(function(){return p})),n.d(e,"j",(function(){return _})),n.d(e,"h",(function(){return v})),n.d(e,"i",(function(){return y}));var r=n(0),s=n(2);const i="6.0.1";class a{static isRequired(t,e){if(null==t)throw new Error(`The '${e}' argument is required.`)}static isNotEmpty(t,e){if(!t||t.match(/^\s*$/))throw new Error(`The '${e}' argument should not be empty.`)}static isIn(t,e,n){if(!(t in e))throw new Error(`Unknown ${n} value: ${t}.`)}}class c{static get isBrowser(){return"object"==typeof window}static get isWebWorker(){return"object"==typeof self&&"importScripts"in self}static get isNode(){return!this.isBrowser&&!this.isWebWorker}}function l(t,e){let n="";return h(t)?(n="Binary data of length "+t.byteLength,e&&(n+=`. Content: '${function(t){const e=new Uint8Array(t);let n="";return e.forEach(t=>{n+=`0x${t<16?"0":""}${t.toString(16)} `}),n.substr(0,n.length-1)}(t)}'`)):"string"==typeof t&&(n="String data of length "+t.length,e&&(n+=`. Content: '${t}'`)),n}function h(t){return t&&"undefined"!=typeof ArrayBuffer&&(t instanceof ArrayBuffer||t.constructor&&"ArrayBuffer"===t.constructor.name)}async function u(t,e,n,o,s,i,a){let c={};if(s){const t=await s();t&&(c={Authorization:"Bearer "+t})}const[u,g]=_();c[u]=g,t.log(r.a.Trace,`(${e} transport) sending data. ${l(i,a.logMessageContent)}.`);const d=h(i)?"arraybuffer":"text",p=await n.post(o,{content:i,headers:{...c,...a.headers},responseType:d,timeout:a.timeout,withCredentials:a.withCredentials});t.log(r.a.Trace,`(${e} transport) request complete. Response status: ${p.statusCode}.`)}function g(t){return void 0===t?new p(r.a.Information):null===t?s.a.instance:void 0!==t.log?t:new p(t)}class d{constructor(t,e){this._subject=t,this._observer=e}dispose(){const t=this._subject.observers.indexOf(this._observer);t>-1&&this._subject.observers.splice(t,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(t=>{})}}class p{constructor(t){this._minLevel=t,this.out=console}log(t,e){if(t>=this._minLevel){const n=`[${(new Date).toISOString()}] ${r.a[t]}: ${e}`;switch(t){case r.a.Critical:case r.a.Error:this.out.error(n);break;case r.a.Warning:this.out.warn(n);break;case r.a.Information:this.out.info(n);break;default:this.out.log(n)}}}}function _(){let t="X-SignalR-User-Agent";return c.isNode&&(t="User-Agent"),[t,f(i,m(),b(),w())]}function f(t,e,n,o){let r="Microsoft SignalR/";const s=t.split(".");return r+=`${s[0]}.${s[1]}`,r+=` (${t}; `,r+=e&&""!==e?e+"; ":"Unknown OS; ",r+=""+n,r+=o?"; "+o:"; Unknown Runtime Version",r+=")",r}function m(){if(!c.isNode)return"";switch(t.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return t.platform}}function w(){if(c.isNode)return t.versions.node}function b(){return c.isNode?"NodeJS":"Browser"}function v(t){return t.stack?t.stack:t.message?t.message:""+t}function y(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==o)return o;throw new Error("could not find global")}}).call(this,n(5),n(6))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));class o{constructor(){}log(t,e){}}o.instance=new o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(4);var o=n(7),r=document.querySelector("#divMessages"),s=document.querySelector("#tbMessage"),i=document.querySelector("#btnSend"),a=(new Date).getTime(),c=(new o.HubConnectionBuilder).withUrl("/hub").build();function l(){c.send("newMessage",a,s.value).then((function(){return s.value=""}))}c.on("messageReceived",(function(t,e){var n=document.createElement("div");n.innerHTML='<div class="message-author">'+t+"</div><div>"+e+"</div>",r.appendChild(n),r.scrollTop=r.scrollHeight})),c.start().catch((function(t){return document.write(t)})),s.addEventListener("keyup",(function(t){"Enter"===t.key&&l()})),i.addEventListener("click",l)},function(t,e,n){},function(t,e){var n,o,r=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(t){n=s}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(t){o=i}}();var c,l=[],h=!1,u=-1;function g(){h&&c&&(h=!1,c.length?l=c.concat(l):u=-1,l.length&&d())}function d(){if(!h){var t=a(g);h=!0;for(var e=l.length;e;){for(c=l,l=[];++u<e;)c&&c[u].run();u=-1,e=l.length}c=null,h=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function _(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new p(t,e)),1!==l.length||h||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=_,r.addListener=_,r.once=_,r.off=_,r.removeListener=_,r.removeAllListeners=_,r.emit=_,r.prependListener=_,r.prependOnceListener=_,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);class o extends Error{constructor(t,e){const n=new.target.prototype;super(`${t}: Status code '${e}'`),this.statusCode=e,this.__proto__=n}}class r extends Error{constructor(t="A timeout occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class s extends Error{constructor(t="An abort occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class i extends Error{constructor(t,e){const n=new.target.prototype;super(t),this.transport=e,this.errorType="UnsupportedTransportError",this.__proto__=n}}class a extends Error{constructor(t,e){const n=new.target.prototype;super(t),this.transport=e,this.errorType="DisabledTransportError",this.__proto__=n}}class c extends Error{constructor(t,e){const n=new.target.prototype;super(t),this.transport=e,this.errorType="FailedToStartTransportError",this.__proto__=n}}class l extends Error{constructor(t){const e=new.target.prototype;super(t),this.errorType="FailedToNegotiateWithServerError",this.__proto__=e}}class h extends Error{constructor(t,e){const n=new.target.prototype;super(t),this.innerErrors=e,this.__proto__=n}}class u{constructor(t,e,n){this.statusCode=t,this.statusText=e,this.content=n}}class g{get(t,e){return this.send({...e,method:"GET",url:t})}post(t,e){return this.send({...e,method:"POST",url:t})}delete(t,e){return this.send({...e,method:"DELETE",url:t})}getCookieString(t){return""}}var d,p=n(0),_=n(1);class f extends g{constructor(t){if(super(),this._logger=t,"undefined"==typeof fetch){const t=require;this._jar=new(t("tough-cookie").CookieJar),this._fetchType=t("node-fetch"),this._fetchType=t("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(Object(_.i)());if("undefined"==typeof AbortController){const t=require;this._abortControllerType=t("abort-controller")}else this._abortControllerType=AbortController}async send(t){if(t.abortSignal&&t.abortSignal.aborted)throw new s;if(!t.method)throw new Error("No method defined.");if(!t.url)throw new Error("No url defined.");const e=new this._abortControllerType;let n;t.abortSignal&&(t.abortSignal.onabort=()=>{e.abort(),n=new s});let i,a=null;if(t.timeout){const o=t.timeout;a=setTimeout(()=>{e.abort(),this._logger.log(p.a.Warning,"Timeout from HTTP request."),n=new r},o)}try{i=await this._fetchType(t.url,{body:t.content,cache:"no-cache",credentials:!0===t.withCredentials?"include":"same-origin",headers:{"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest",...t.headers},method:t.method,mode:"cors",redirect:"follow",signal:e.signal})}catch(t){if(n)throw n;throw this._logger.log(p.a.Warning,`Error from HTTP request. ${t}.`),t}finally{a&&clearTimeout(a),t.abortSignal&&(t.abortSignal.onabort=null)}if(!i.ok){const t=await m(i,"text");throw new o(t||i.statusText,i.status)}const c=m(i,t.responseType),l=await c;return new u(i.status,i.statusText,l)}getCookieString(t){let e="";return _.c.isNode&&this._jar&&this._jar.getCookies(t,(t,n)=>e=n.join("; ")),e}}function m(t,e){let n;switch(e){case"arraybuffer":n=t.arrayBuffer();break;case"text":n=t.text();break;case"blob":case"document":case"json":throw new Error(e+" is not supported.");default:n=t.text()}return n}class w extends g{constructor(t){super(),this._logger=t}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new s):t.method?t.url?new Promise((e,n)=>{const i=new XMLHttpRequest;i.open(t.method,t.url,!0),i.withCredentials=void 0===t.withCredentials||t.withCredentials,i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.setRequestHeader("Content-Type","text/plain;charset=UTF-8");const a=t.headers;a&&Object.keys(a).forEach(t=>{i.setRequestHeader(t,a[t])}),t.responseType&&(i.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=()=>{i.abort(),n(new s)}),t.timeout&&(i.timeout=t.timeout),i.onload=()=>{t.abortSignal&&(t.abortSignal.onabort=null),i.status>=200&&i.status<300?e(new u(i.status,i.statusText,i.response||i.responseText)):n(new o(i.response||i.responseText||i.statusText,i.status))},i.onerror=()=>{this._logger.log(p.a.Warning,`Error from HTTP request. ${i.status}: ${i.statusText}.`),n(new o(i.statusText,i.status))},i.ontimeout=()=>{this._logger.log(p.a.Warning,"Timeout from HTTP request."),n(new r)},i.send(t.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class b extends g{constructor(t){if(super(),"undefined"!=typeof fetch||_.c.isNode)this._httpClient=new f(t);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new w(t)}}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new s):t.method?t.url?this._httpClient.send(t):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(t){return this._httpClient.getCookieString(t)}}class v{static write(t){return`${t}${v.RecordSeparator}`}static parse(t){if(t[t.length-1]!==v.RecordSeparator)throw new Error("Message is incomplete.");const e=t.split(v.RecordSeparator);return e.pop(),e}}v.RecordSeparatorCode=30,v.RecordSeparator=String.fromCharCode(v.RecordSeparatorCode);class y{writeHandshakeRequest(t){return v.write(JSON.stringify(t))}parseHandshakeResponse(t){let e,n;if(Object(_.k)(t)){const o=new Uint8Array(t),r=o.indexOf(v.RecordSeparatorCode);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;e=String.fromCharCode.apply(null,Array.prototype.slice.call(o.slice(0,s))),n=o.byteLength>s?o.slice(s).buffer:null}else{const o=t,r=o.indexOf(v.RecordSeparator);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;e=o.substring(0,s),n=o.length>s?o.substring(s):null}const o=v.parse(e),r=JSON.parse(o[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return[n,r]}}!function(t){t[t.Invocation=1]="Invocation",t[t.StreamItem=2]="StreamItem",t[t.Completion=3]="Completion",t[t.StreamInvocation=4]="StreamInvocation",t[t.CancelInvocation=5]="CancelInvocation",t[t.Ping=6]="Ping",t[t.Close=7]="Close"}(d||(d={}));class S{constructor(){this.observers=[]}next(t){for(const e of this.observers)e.next(t)}error(t){for(const e of this.observers)e.error&&e.error(t)}complete(){for(const t of this.observers)t.complete&&t.complete()}subscribe(t){return this.observers.push(t),new _.d(this,t)}}var C;!function(t){t.Disconnected="Disconnected",t.Connecting="Connecting",t.Connected="Connected",t.Disconnecting="Disconnecting",t.Reconnecting="Reconnecting"}(C||(C={}));class E{constructor(t,e,n,o){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(p.a.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},_.a.isRequired(t,"connection"),_.a.isRequired(e,"logger"),_.a.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this._logger=e,this._protocol=n,this.connection=t,this._reconnectPolicy=o,this._handshakeProtocol=new y,this.connection.onreceive=t=>this._processIncomingData(t),this.connection.onclose=t=>this._connectionClosed(t),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=C.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:d.Ping})}static create(t,e,n,o){return new E(t,e,n,o)}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(t){if(this._connectionState!==C.Disconnected&&this._connectionState!==C.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!t)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=t}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==C.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=C.Connecting,this._logger.log(p.a.Debug,"Starting HubConnection.");try{await this._startInternal(),_.c.isBrowser&&document&&document.addEventListener("freeze",this._freezeEventListener),this._connectionState=C.Connected,this._connectionStarted=!0,this._logger.log(p.a.Debug,"HubConnection connected successfully.")}catch(t){return this._connectionState=C.Disconnected,this._logger.log(p.a.Debug,`HubConnection failed to start successfully because of error '${t}'.`),Promise.reject(t)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const t=new Promise((t,e)=>{this._handshakeResolver=t,this._handshakeRejecter=e});await this.connection.start(this._protocol.transferFormat);try{const e={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(p.a.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(e)),this._logger.log(p.a.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await t,this._stopDuringStartError)throw this._stopDuringStartError}catch(t){throw this._logger.log(p.a.Debug,`Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(t),t}}async stop(){const t=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await t}catch(t){}}_stopInternal(t){return this._connectionState===C.Disconnected?(this._logger.log(p.a.Debug,`Call to HubConnection.stop(${t}) ignored because it is already in the disconnected state.`),Promise.resolve()):this._connectionState===C.Disconnecting?(this._logger.log(p.a.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState=C.Disconnecting,this._logger.log(p.a.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(p.a.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=t||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(t)))}stream(t,...e){const[n,o]=this._replaceStreamingParams(e),r=this._createStreamInvocation(t,e,o);let s;const i=new S;return i.cancelCallback=()=>{const t=this._createCancelInvocation(r.invocationId);return delete this._callbacks[r.invocationId],s.then(()=>this._sendWithProtocol(t))},this._callbacks[r.invocationId]=(t,e)=>{e?i.error(e):t&&(t.type===d.Completion?t.error?i.error(new Error(t.error)):i.complete():i.next(t.item))},s=this._sendWithProtocol(r).catch(t=>{i.error(t),delete this._callbacks[r.invocationId]}),this._launchStreams(n,s),i}_sendMessage(t){return this._resetKeepAliveInterval(),this.connection.send(t)}_sendWithProtocol(t){return this._sendMessage(this._protocol.writeMessage(t))}send(t,...e){const[n,o]=this._replaceStreamingParams(e),r=this._sendWithProtocol(this._createInvocation(t,e,!0,o));return this._launchStreams(n,r),r}invoke(t,...e){const[n,o]=this._replaceStreamingParams(e),r=this._createInvocation(t,e,!1,o);return new Promise((t,e)=>{this._callbacks[r.invocationId]=(n,o)=>{o?e(o):n&&(n.type===d.Completion?n.error?e(new Error(n.error)):t(n.result):e(new Error("Unexpected message type: "+n.type)))};const o=this._sendWithProtocol(r).catch(t=>{e(t),delete this._callbacks[r.invocationId]});this._launchStreams(n,o)})}on(t,e){t&&e&&(t=t.toLowerCase(),this._methods[t]||(this._methods[t]=[]),-1===this._methods[t].indexOf(e)&&this._methods[t].push(e))}off(t,e){if(!t)return;t=t.toLowerCase();const n=this._methods[t];if(n)if(e){const o=n.indexOf(e);-1!==o&&(n.splice(o,1),0===n.length&&delete this._methods[t])}else delete this._methods[t]}onclose(t){t&&this._closedCallbacks.push(t)}onreconnecting(t){t&&this._reconnectingCallbacks.push(t)}onreconnected(t){t&&this._reconnectedCallbacks.push(t)}_processIncomingData(t){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(t=this._processHandshakeResponse(t),this._receivedHandshakeResponse=!0),t){const e=this._protocol.parseMessages(t,this._logger);for(const t of e)switch(t.type){case d.Invocation:this._invokeClientMethod(t);break;case d.StreamItem:case d.Completion:{const e=this._callbacks[t.invocationId];if(e){t.type===d.Completion&&delete this._callbacks[t.invocationId];try{e(t)}catch(t){this._logger.log(p.a.Error,"Stream callback threw error: "+Object(_.h)(t))}}break}case d.Ping:break;case d.Close:{this._logger.log(p.a.Information,"Close message received from server.");const e=t.error?new Error("Server returned an error on close: "+t.error):void 0;!0===t.allowReconnect?this.connection.stop(e):this._stopPromise=this._stopInternal(e);break}default:this._logger.log(p.a.Warning,`Invalid message type: ${t.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(t){let e,n;try{[n,e]=this._handshakeProtocol.parseHandshakeResponse(t)}catch(t){const e="Error parsing handshake response: "+t;this._logger.log(p.a.Error,e);const n=new Error(e);throw this._handshakeRejecter(n),n}if(e.error){const t="Server returned handshake error: "+e.error;this._logger.log(p.a.Error,t);const n=new Error(t);throw this._handshakeRejecter(n),n}return this._logger.log(p.a.Debug,"Server handshake complete."),this._handshakeResolver(),n}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let t=this._nextKeepAlive-(new Date).getTime();t<0&&(t=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===C.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},t)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}_invokeClientMethod(t){const e=this._methods[t.target.toLowerCase()];if(e){try{e.forEach(e=>e.apply(this,t.arguments))}catch(e){this._logger.log(p.a.Error,`A callback for the method ${t.target.toLowerCase()} threw error '${e}'.`)}if(t.invocationId){const t="Server requested a response, which is not supported in this version of the client.";this._logger.log(p.a.Error,t),this._stopPromise=this._stopInternal(new Error(t))}}else this._logger.log(p.a.Warning,`No client method with the name '${t.target}' found.`)}_connectionClosed(t){this._logger.log(p.a.Debug,`HubConnection.connectionClosed(${t}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||t||new Error("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(t||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===C.Disconnecting?this._completeClose(t):this._connectionState===C.Connected&&this._reconnectPolicy?this._reconnect(t):this._connectionState===C.Connected&&this._completeClose(t)}_completeClose(t){if(this._connectionStarted){this._connectionState=C.Disconnected,this._connectionStarted=!1,_.c.isBrowser&&document&&document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(e=>e.apply(this,[t]))}catch(e){this._logger.log(p.a.Error,`An onclose callback called with error '${t}' threw error '${e}'.`)}}}async _reconnect(t){const e=Date.now();let n=0,o=void 0!==t?t:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(n++,0,o);if(null===r)return this._logger.log(p.a.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(t);if(this._connectionState=C.Reconnecting,t?this._logger.log(p.a.Information,`Connection reconnecting because of error '${t}'.`):this._logger.log(p.a.Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach(e=>e.apply(this,[t]))}catch(e){this._logger.log(p.a.Error,`An onreconnecting callback called with error '${t}' threw error '${e}'.`)}if(this._connectionState!==C.Reconnecting)return void this._logger.log(p.a.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==r;){if(this._logger.log(p.a.Information,`Reconnect attempt number ${n} will start in ${r} ms.`),await new Promise(t=>{this._reconnectDelayHandle=setTimeout(t,r)}),this._reconnectDelayHandle=void 0,this._connectionState!==C.Reconnecting)return void this._logger.log(p.a.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=C.Connected,this._logger.log(p.a.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach(t=>t.apply(this,[this.connection.connectionId]))}catch(t){this._logger.log(p.a.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${t}'.`)}return}catch(t){if(this._logger.log(p.a.Information,`Reconnect attempt failed because of error '${t}'.`),this._connectionState!==C.Reconnecting)return this._logger.log(p.a.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===C.Disconnecting&&this._completeClose());o=t instanceof Error?t:new Error(t.toString()),r=this._getNextRetryDelay(n++,Date.now()-e,o)}}this._logger.log(p.a.Information,`Reconnect retries have been exhausted after ${Date.now()-e} ms and ${n} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(t,e,n){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:e,previousRetryCount:t,retryReason:n})}catch(n){return this._logger.log(p.a.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${t}, ${e}) threw error '${n}'.`),null}}_cancelCallbacksWithError(t){const e=this._callbacks;this._callbacks={},Object.keys(e).forEach(n=>{const o=e[n];try{o(null,t)}catch(e){this._logger.log(p.a.Error,`Stream 'error' callback called with '${t}' threw error: ${Object(_.h)(e)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(t,e,n,o){if(n)return 0!==o.length?{arguments:e,streamIds:o,target:t,type:d.Invocation}:{arguments:e,target:t,type:d.Invocation};{const n=this._invocationId;return this._invocationId++,0!==o.length?{arguments:e,invocationId:n.toString(),streamIds:o,target:t,type:d.Invocation}:{arguments:e,invocationId:n.toString(),target:t,type:d.Invocation}}}_launchStreams(t,e){if(0!==t.length){e||(e=Promise.resolve());for(const n in t)t[n].subscribe({complete:()=>{e=e.then(()=>this._sendWithProtocol(this._createCompletionMessage(n)))},error:t=>{let o;o=t instanceof Error?t.message:t&&t.toString?t.toString():"Unknown error",e=e.then(()=>this._sendWithProtocol(this._createCompletionMessage(n,o)))},next:t=>{e=e.then(()=>this._sendWithProtocol(this._createStreamItemMessage(n,t)))}})}}_replaceStreamingParams(t){const e=[],n=[];for(let o=0;o<t.length;o++){const r=t[o];if(this._isObservable(r)){const s=this._invocationId;this._invocationId++,e[s]=r,n.push(s.toString()),t.splice(o,1)}}return[e,n]}_isObservable(t){return t&&t.subscribe&&"function"==typeof t.subscribe}_createStreamInvocation(t,e,n){const o=this._invocationId;return this._invocationId++,0!==n.length?{arguments:e,invocationId:o.toString(),streamIds:n,target:t,type:d.StreamInvocation}:{arguments:e,invocationId:o.toString(),target:t,type:d.StreamInvocation}}_createCancelInvocation(t){return{invocationId:t,type:d.CancelInvocation}}_createStreamItemMessage(t,e){return{invocationId:t,item:e,type:d.StreamItem}}_createCompletionMessage(t,e,n){return e?{error:e,invocationId:t,type:d.Completion}:{invocationId:t,result:n,type:d.Completion}}}const T=[0,2e3,1e4,3e4,null];class k{constructor(t){this._retryDelays=void 0!==t?[...t,null]:T}nextRetryDelayInMilliseconds(t){return this._retryDelays[t.previousRetryCount]}}class I{}var P,D;I.Authorization="Authorization",I.Cookie="Cookie",function(t){t[t.None=0]="None",t[t.WebSockets=1]="WebSockets",t[t.ServerSentEvents=2]="ServerSentEvents",t[t.LongPolling=4]="LongPolling"}(P||(P={})),function(t){t[t.Text=1]="Text",t[t.Binary=2]="Binary"}(D||(D={}));class ${constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class R{constructor(t,e,n,o){this._httpClient=t,this._accessTokenFactory=e,this._logger=n,this._pollAbort=new $,this._options=o,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(t,e){if(_.a.isRequired(t,"url"),_.a.isRequired(e,"transferFormat"),_.a.isIn(e,D,"transferFormat"),this._url=t,this._logger.log(p.a.Trace,"(LongPolling transport) Connecting."),e===D.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[n,r]=Object(_.j)(),s={[n]:r,...this._options.headers},i={abortSignal:this._pollAbort.signal,headers:s,timeout:1e5,withCredentials:this._options.withCredentials};e===D.Binary&&(i.responseType="arraybuffer");const a=await this._getAccessToken();this._updateHeaderToken(i,a);const c=`${t}&_=${Date.now()}`;this._logger.log(p.a.Trace,`(LongPolling transport) polling: ${c}.`);const l=await this._httpClient.get(c,i);200!==l.statusCode?(this._logger.log(p.a.Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this._closeError=new o(l.statusText||"",l.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,i)}async _getAccessToken(){return this._accessTokenFactory?await this._accessTokenFactory():null}_updateHeaderToken(t,e){t.headers||(t.headers={}),e?t.headers[I.Authorization]="Bearer "+e:t.headers[I.Authorization]&&delete t.headers[I.Authorization]}async _poll(t,e){try{for(;this._running;){const n=await this._getAccessToken();this._updateHeaderToken(e,n);try{const n=`${t}&_=${Date.now()}`;this._logger.log(p.a.Trace,`(LongPolling transport) polling: ${n}.`);const r=await this._httpClient.get(n,e);204===r.statusCode?(this._logger.log(p.a.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==r.statusCode?(this._logger.log(p.a.Error,`(LongPolling transport) Unexpected response code: ${r.statusCode}.`),this._closeError=new o(r.statusText||"",r.statusCode),this._running=!1):r.content?(this._logger.log(p.a.Trace,`(LongPolling transport) data received. ${Object(_.g)(r.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(r.content)):this._logger.log(p.a.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(t){this._running?t instanceof r?this._logger.log(p.a.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=t,this._running=!1):this._logger.log(p.a.Trace,"(LongPolling transport) Poll errored after shutdown: "+t.message)}}}finally{this._logger.log(p.a.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(t){return this._running?Object(_.l)(this._logger,"LongPolling",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(p.a.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(p.a.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const t={},[e,n]=Object(_.j)();t[e]=n;const o={headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials},r=await this._getAccessToken();this._updateHeaderToken(o,r),await this._httpClient.delete(this._url,o),this._logger.log(p.a.Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(p.a.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let t="(LongPolling transport) Firing onclose event.";this._closeError&&(t+=" Error: "+this._closeError),this._logger.log(p.a.Trace,t),this.onclose(this._closeError)}}}class x{constructor(t,e,n,o){this._httpClient=t,this._accessTokenFactory=e,this._logger=n,this._options=o,this.onreceive=null,this.onclose=null}async connect(t,e){if(_.a.isRequired(t,"url"),_.a.isRequired(e,"transferFormat"),_.a.isIn(e,D,"transferFormat"),this._logger.log(p.a.Trace,"(SSE transport) Connecting."),this._url=t,this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(e))}return new Promise((n,o)=>{let r,s=!1;if(e===D.Text){if(_.c.isBrowser||_.c.isWebWorker)r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials});else{const e=this._httpClient.getCookieString(t),n={};n.Cookie=e;const[o,s]=Object(_.j)();n[o]=s,r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials,headers:{...n,...this._options.headers}})}try{r.onmessage=t=>{if(this.onreceive)try{this._logger.log(p.a.Trace,`(SSE transport) data received. ${Object(_.g)(t.data,this._options.logMessageContent)}.`),this.onreceive(t.data)}catch(t){return void this._close(t)}},r.onerror=t=>{s?this._close():o(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},r.onopen=()=>{this._logger.log(p.a.Information,"SSE connected to "+this._url),this._eventSource=r,s=!0,n()}}catch(t){return void o(t)}}else o(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})}async send(t){return this._eventSource?Object(_.l)(this._logger,"SSE",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(t){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(t))}}class j{constructor(t,e,n,o,r,s){this._logger=n,this._accessTokenFactory=e,this._logMessageContent=o,this._webSocketConstructor=r,this._httpClient=t,this.onreceive=null,this.onclose=null,this._headers=s}async connect(t,e){if(_.a.isRequired(t,"url"),_.a.isRequired(e,"transferFormat"),_.a.isIn(e,D,"transferFormat"),this._logger.log(p.a.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(e))}return new Promise((n,o)=>{let r;t=t.replace(/^http/,"ws");const s=this._httpClient.getCookieString(t);let i=!1;if(_.c.isNode){const e={},[n,o]=Object(_.j)();e[n]=o,s&&(e[I.Cookie]=""+s),r=new this._webSocketConstructor(t,void 0,{headers:{...e,...this._headers}})}r||(r=new this._webSocketConstructor(t)),e===D.Binary&&(r.binaryType="arraybuffer"),r.onopen=e=>{this._logger.log(p.a.Information,`WebSocket connected to ${t}.`),this._webSocket=r,i=!0,n()},r.onerror=t=>{let e=null;e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:"There was an error with the transport",this._logger.log(p.a.Information,`(WebSockets transport) ${e}.`)},r.onmessage=t=>{if(this._logger.log(p.a.Trace,`(WebSockets transport) data received. ${Object(_.g)(t.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(t.data)}catch(t){return void this._close(t)}},r.onclose=t=>{if(i)this._close(t);else{let e=null;e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",o(new Error(e))}}})}send(t){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(p.a.Trace,`(WebSockets transport) sending data. ${Object(_.g)(t,this._logMessageContent)}.`),this._webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(t){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(p.a.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(t)||!1!==t.wasClean&&1e3===t.code?t instanceof Error?this.onclose(t):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${t.code} (${t.reason||"no reason given"}).`)))}_isCloseEvent(t){return t&&"boolean"==typeof t.wasClean&&"number"==typeof t.code}}class H{constructor(t,e={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,_.a.isRequired(t,"url"),this._logger=Object(_.f)(e.logger),this.baseUrl=this._resolveUrl(t),(e=e||{}).logMessageContent=void 0!==e.logMessageContent&&e.logMessageContent,"boolean"!=typeof e.withCredentials&&void 0!==e.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");e.withCredentials=void 0===e.withCredentials||e.withCredentials,e.timeout=void 0===e.timeout?1e5:e.timeout;let n=null,o=null;if(_.c.isNode){const t=require;n=t("ws"),o=t("eventsource")}_.c.isNode||"undefined"==typeof WebSocket||e.WebSocket?_.c.isNode&&!e.WebSocket&&n&&(e.WebSocket=n):e.WebSocket=WebSocket,_.c.isNode||"undefined"==typeof EventSource||e.EventSource?_.c.isNode&&!e.EventSource&&void 0!==o&&(e.EventSource=o):e.EventSource=EventSource,this._httpClient=e.httpClient||new b(this._logger),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=e,this.onreceive=null,this.onclose=null}async start(t){if(t=t||D.Binary,_.a.isIn(t,D,"transferFormat"),this._logger.log(p.a.Debug,`Starting connection with transfer format '${D[t]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(t),await this._startInternalPromise,"Disconnecting"===this._connectionState){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(p.a.Error,t),await this._stopPromise,Promise.reject(new Error(t))}if("Connected"!==this._connectionState){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(p.a.Error,t),Promise.reject(new Error(t))}this._connectionStarted=!0}send(t){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new O(this.transport)),this._sendQueue.send(t))}async stop(t){return"Disconnected"===this._connectionState?(this._logger.log(p.a.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(p.a.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise(t=>{this._stopPromiseResolver=t}),await this._stopInternal(t),void await this._stopPromise)}async _stopInternal(t){this._stopError=t;try{await this._startInternalPromise}catch(t){}if(this.transport){try{await this.transport.stop()}catch(t){this._logger.log(p.a.Error,`HttpConnection.transport.stop() threw error '${t}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(p.a.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(t){let e=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==P.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(P.WebSockets),await this._startTransport(e,t)}else{let n=null,o=0;do{if(n=await this._getNegotiationResponse(e),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new Error("The connection was stopped during negotiation.");if(n.error)throw new Error(n.error);if(n.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(n.url&&(e=n.url),n.accessToken){const t=n.accessToken;this._accessTokenFactory=()=>t}o++}while(n.url&&o<100);if(100===o&&n.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(e,this._options.transport,n,t)}this.transport instanceof R&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(p.a.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(t){return this._logger.log(p.a.Error,"Failed to start the connection: "+t),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(t)}}async _getNegotiationResponse(t){const e={};if(this._accessTokenFactory){const t=await this._accessTokenFactory();t&&(e[I.Authorization]="Bearer "+t)}const[n,r]=Object(_.j)();e[n]=r;const s=this._resolveNegotiateUrl(t);this._logger.log(p.a.Debug,`Sending negotiation request: ${s}.`);try{const t=await this._httpClient.post(s,{content:"",headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==t.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${t.statusCode}'`));const n=JSON.parse(t.content);return(!n.negotiateVersion||n.negotiateVersion<1)&&(n.connectionToken=n.connectionId),n}catch(t){let e="Failed to complete negotiation with the server: "+t;return t instanceof o&&404===t.statusCode&&(e+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(p.a.Error,e),Promise.reject(new l(e))}}_createConnectUrl(t,e){return e?t+(-1===t.indexOf("?")?"?":"&")+"id="+e:t}async _createTransport(t,e,n,o){let r=this._createConnectUrl(t,n.connectionToken);if(this._isITransport(e))return this._logger.log(p.a.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=e,await this._startTransport(r,o),void(this.connectionId=n.connectionId);const s=[],i=n.availableTransports||[];let a=n;for(const n of i){const i=this._resolveTransportOrError(n,e,o);if(i instanceof Error)s.push(n.transport+" failed:"),s.push(i);else if(this._isITransport(i)){if(this.transport=i,!a){try{a=await this._getNegotiationResponse(t)}catch(t){return Promise.reject(t)}r=this._createConnectUrl(t,a.connectionToken)}try{return await this._startTransport(r,o),void(this.connectionId=a.connectionId)}catch(t){if(this._logger.log(p.a.Error,`Failed to start the transport '${n.transport}': ${t}`),a=void 0,s.push(new c(`${n.transport} failed: ${t}`,P[n.transport])),"Connecting"!==this._connectionState){const t="Failed to select transport before stop() was called.";return this._logger.log(p.a.Debug,t),Promise.reject(new Error(t))}}}}return s.length>0?Promise.reject(new h("Unable to connect to the server with any of the available transports. "+s.join(" "),s)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(t){switch(t){case P.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new j(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case P.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new x(this._httpClient,this._accessTokenFactory,this._logger,this._options);case P.LongPolling:return new R(this._httpClient,this._accessTokenFactory,this._logger,this._options);default:throw new Error(`Unknown transport: ${t}.`)}}_startTransport(t,e){return this.transport.onreceive=this.onreceive,this.transport.onclose=t=>this._stopConnection(t),this.transport.connect(t,e)}_resolveTransportOrError(t,e,n){const o=P[t.transport];if(null==o)return this._logger.log(p.a.Debug,`Skipping transport '${t.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${t.transport}' because it is not supported by this client.`);if(!function(t,e){return!t||0!=(e&t)}(e,o))return this._logger.log(p.a.Debug,`Skipping transport '${P[o]}' because it was disabled by the client.`),new a(`'${P[o]}' is disabled by the client.`,o);if(!(t.transferFormats.map(t=>D[t]).indexOf(n)>=0))return this._logger.log(p.a.Debug,`Skipping transport '${P[o]}' because it does not support the requested transfer format '${D[n]}'.`),new Error(`'${P[o]}' does not support ${D[n]}.`);if(o===P.WebSockets&&!this._options.WebSocket||o===P.ServerSentEvents&&!this._options.EventSource)return this._logger.log(p.a.Debug,`Skipping transport '${P[o]}' because it is not supported in your environment.'`),new i(`'${P[o]}' is not supported in your environment.`,o);this._logger.log(p.a.Debug,`Selecting transport '${P[o]}'.`);try{return this._constructTransport(o)}catch(t){return t}}_isITransport(t){return t&&"object"==typeof t&&"connect"in t}_stopConnection(t){if(this._logger.log(p.a.Debug,`HttpConnection.stopConnection(${t}) called while in state ${this._connectionState}.`),this.transport=void 0,t=this._stopError||t,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(p.a.Warning,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${t}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),t?this._logger.log(p.a.Error,`Connection disconnected with error '${t}'.`):this._logger.log(p.a.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(t=>{this._logger.log(p.a.Error,`TransportSendQueue.stop() threw error '${t}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(e){this._logger.log(p.a.Error,`HttpConnection.onclose(${t}) threw error '${e}'.`)}}}else this._logger.log(p.a.Debug,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(t){if(0===t.lastIndexOf("https://",0)||0===t.lastIndexOf("http://",0))return t;if(!_.c.isBrowser||!window.document)throw new Error(`Cannot resolve '${t}'.`);const e=window.document.createElement("a");return e.href=t,this._logger.log(p.a.Information,`Normalizing '${t}' to '${e.href}'.`),e.href}_resolveNegotiateUrl(t){const e=t.indexOf("?");let n=t.substring(0,-1===e?t.length:e);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",n+=-1===e?"":t.substring(e),-1===n.indexOf("negotiateVersion")&&(n+=-1===e?"?":"&",n+="negotiateVersion="+this._negotiateVersion),n}}class O{constructor(t){this._transport=t,this._buffer=[],this._executing=!0,this._sendBufferedData=new L,this._transportResult=new L,this._sendLoopPromise=this._sendLoop()}send(t){return this._bufferData(t),this._transportResult||(this._transportResult=new L),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(t){if(this._buffer.length&&typeof this._buffer[0]!=typeof t)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof t}`);this._buffer.push(t),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new L;const t=this._transportResult;this._transportResult=void 0;const e="string"==typeof this._buffer[0]?this._buffer.join(""):O._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(e),t.resolve()}catch(e){t.reject(e)}}}static _concatBuffers(t){const e=t.map(t=>t.byteLength).reduce((t,e)=>t+e),n=new Uint8Array(e);let o=0;for(const e of t)n.set(new Uint8Array(e),o),o+=e.byteLength;return n.buffer}}class L{constructor(){this.promise=new Promise((t,e)=>[this._resolver,this._rejecter]=[t,e])}resolve(){this._resolver()}reject(t){this._rejecter(t)}}var M=n(2);class N{constructor(){this.name="json",this.version=1,this.transferFormat=D.Text}parseMessages(t,e){if("string"!=typeof t)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];null===e&&(e=M.a.instance);const n=v.parse(t),o=[];for(const t of n){const n=JSON.parse(t);if("number"!=typeof n.type)throw new Error("Invalid payload.");switch(n.type){case d.Invocation:this._isInvocationMessage(n);break;case d.StreamItem:this._isStreamItemMessage(n);break;case d.Completion:this._isCompletionMessage(n);break;case d.Ping:case d.Close:break;default:e.log(p.a.Information,"Unknown message type '"+n.type+"' ignored.");continue}o.push(n)}return o}writeMessage(t){return v.write(JSON.stringify(t))}_isInvocationMessage(t){this._assertNotEmptyString(t.target,"Invalid payload for Invocation message."),void 0!==t.invocationId&&this._assertNotEmptyString(t.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(t){if(this._assertNotEmptyString(t.invocationId,"Invalid payload for StreamItem message."),void 0===t.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this._assertNotEmptyString(t.error,"Invalid payload for Completion message."),this._assertNotEmptyString(t.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(t,e){if("string"!=typeof t||""===t)throw new Error(e)}}const W={trace:p.a.Trace,debug:p.a.Debug,info:p.a.Information,information:p.a.Information,warn:p.a.Warning,warning:p.a.Warning,error:p.a.Error,critical:p.a.Critical,none:p.a.None};class A{configureLogging(t){if(_.a.isRequired(t,"logging"),void 0!==t.log)this.logger=t;else if("string"==typeof t){const e=function(t){const e=W[t.toLowerCase()];if(void 0!==e)return e;throw new Error("Unknown log level: "+t)}(t);this.logger=new _.b(e)}else this.logger=new _.b(t);return this}withUrl(t,e){return _.a.isRequired(t,"url"),_.a.isNotEmpty(t,"url"),this.url=t,this.httpConnectionOptions="object"==typeof e?{...this.httpConnectionOptions,...e}:{...this.httpConnectionOptions,transport:e},this}withHubProtocol(t){return _.a.isRequired(t,"protocol"),this.protocol=t,this}withAutomaticReconnect(t){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return t?Array.isArray(t)?this.reconnectPolicy=new k(t):this.reconnectPolicy=t:this.reconnectPolicy=new k,this}build(){const t=this.httpConnectionOptions||{};if(void 0===t.logger&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const e=new H(this.url,t);return E.create(e,this.logger||M.a.instance,this.protocol||new N,this.reconnectPolicy)}}n.d(e,"AbortError",(function(){return s})),n.d(e,"HttpError",(function(){return o})),n.d(e,"TimeoutError",(function(){return r})),n.d(e,"HttpClient",(function(){return g})),n.d(e,"HttpResponse",(function(){return u})),n.d(e,"DefaultHttpClient",(function(){return b})),n.d(e,"HubConnection",(function(){return E})),n.d(e,"HubConnectionState",(function(){return C})),n.d(e,"HubConnectionBuilder",(function(){return A})),n.d(e,"MessageType",(function(){return d})),n.d(e,"LogLevel",(function(){return p.a})),n.d(e,"HttpTransportType",(function(){return P})),n.d(e,"TransferFormat",(function(){return D})),n.d(e,"NullLogger",(function(){return M.a})),n.d(e,"JsonHubProtocol",(function(){return N})),n.d(e,"Subject",(function(){return S})),n.d(e,"VERSION",(function(){return _.e}))}]);